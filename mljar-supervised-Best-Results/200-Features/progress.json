{
    "fit_level": "finished",
    "time_controller": {
        "total_time_limit": 14400,
        "model_time_limit": null,
        "steps": [
            "simple_algorithms",
            "default_algorithms",
            "not_so_random",
            "golden_features",
            "insert_random_feature",
            "features_selection",
            "hill_climbing_1",
            "hill_climbing_2",
            "ensemble"
        ],
        "algorithms": [
            "Baseline",
            "Decision Tree",
            "Random Forest",
            "Xgboost",
            "LightGBM",
            "CatBoost",
            "Extra Trees",
            "Neural Network",
            "Nearest Neighbors"
        ],
        "spend": [
            {
                "model_name": "prepare_data",
                "model_type": "prepare_data",
                "fit_level": "prepare_data",
                "train_time": 49.05080461502075
            },
            {
                "model_name": "1_Baseline",
                "model_type": "Baseline",
                "fit_level": "simple_algorithms",
                "train_time": 4.059884071350098
            },
            {
                "model_name": "2_DecisionTree",
                "model_type": "Decision Tree",
                "fit_level": "simple_algorithms",
                "train_time": 82.13586711883545
            },
            {
                "model_name": "3_DecisionTree",
                "model_type": "Decision Tree",
                "fit_level": "simple_algorithms",
                "train_time": 70.49799704551697
            },
            {
                "model_name": "4_DecisionTree",
                "model_type": "Decision Tree",
                "fit_level": "simple_algorithms",
                "train_time": 66.83353090286255
            },
            {
                "model_name": "5_Default_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "default_algorithms",
                "train_time": 116.80346250534058
            },
            {
                "model_name": "6_Default_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "default_algorithms",
                "train_time": 108.57539176940918
            },
            {
                "model_name": "7_Default_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "default_algorithms",
                "train_time": 80.43610143661499
            },
            {
                "model_name": "8_Default_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "default_algorithms",
                "train_time": 28.982635259628296
            },
            {
                "model_name": "9_Default_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "default_algorithms",
                "train_time": 88.15713953971863
            },
            {
                "model_name": "10_Default_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "default_algorithms",
                "train_time": 82.86250805854797
            },
            {
                "model_name": "15_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "not_so_random",
                "train_time": 71.54897093772888
            },
            {
                "model_name": "11_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "not_so_random",
                "train_time": 84.28138875961304
            },
            {
                "model_name": "19_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "not_so_random",
                "train_time": 200.93556094169617
            },
            {
                "model_name": "23_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "not_so_random",
                "train_time": 93.26646113395691
            },
            {
                "model_name": "27_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "not_so_random",
                "train_time": 80.34199857711792
            },
            {
                "model_name": "31_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "not_so_random",
                "train_time": 28.01265835762024
            },
            {
                "model_name": "16_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "not_so_random",
                "train_time": 72.04727220535278
            },
            {
                "model_name": "12_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "not_so_random",
                "train_time": 102.49562287330627
            },
            {
                "model_name": "20_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "not_so_random",
                "train_time": 112.82304644584656
            },
            {
                "model_name": "24_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "not_so_random",
                "train_time": 127.73259997367859
            },
            {
                "model_name": "28_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "not_so_random",
                "train_time": 109.79330444335938
            },
            {
                "model_name": "32_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "not_so_random",
                "train_time": 37.16723823547363
            },
            {
                "model_name": "17_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "not_so_random",
                "train_time": 100.32281875610352
            },
            {
                "model_name": "13_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "not_so_random",
                "train_time": 85.62850785255432
            },
            {
                "model_name": "21_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "not_so_random",
                "train_time": 101.88896036148071
            },
            {
                "model_name": "25_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "not_so_random",
                "train_time": 115.23002481460571
            },
            {
                "model_name": "29_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "not_so_random",
                "train_time": 81.726402759552
            },
            {
                "model_name": "33_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "not_so_random",
                "train_time": 37.74171423912048
            },
            {
                "model_name": "18_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "not_so_random",
                "train_time": 105.88118124008179
            },
            {
                "model_name": "14_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "not_so_random",
                "train_time": 73.18686962127686
            },
            {
                "model_name": "22_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "not_so_random",
                "train_time": 80.66518831253052
            },
            {
                "model_name": "26_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "not_so_random",
                "train_time": 143.31312608718872
            },
            {
                "model_name": "30_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "not_so_random",
                "train_time": 90.94764542579651
            },
            {
                "model_name": "34_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "not_so_random",
                "train_time": 40.81134629249573
            },
            {
                "model_name": "19_CatBoost_GoldenFeatures",
                "model_type": "CatBoost",
                "fit_level": "golden_features",
                "train_time": 298.43601059913635
            },
            {
                "model_name": "21_CatBoost_GoldenFeatures",
                "model_type": "CatBoost",
                "fit_level": "golden_features",
                "train_time": 127.42701983451843
            },
            {
                "model_name": "7_Default_CatBoost_GoldenFeatures",
                "model_type": "CatBoost",
                "fit_level": "golden_features",
                "train_time": 100.32045197486877
            },
            {
                "model_name": "19_CatBoost_RandomFeature",
                "model_type": "CatBoost",
                "fit_level": "insert_random_feature",
                "train_time": 215.96748065948486
            },
            {
                "model_name": "19_CatBoost_SelectedFeatures",
                "model_type": "CatBoost",
                "fit_level": "features_selection",
                "train_time": 60.83582282066345
            },
            {
                "model_name": "15_LightGBM_SelectedFeatures",
                "model_type": "LightGBM",
                "fit_level": "features_selection",
                "train_time": 47.317450284957886
            },
            {
                "model_name": "6_Default_Xgboost_SelectedFeatures",
                "model_type": "Xgboost",
                "fit_level": "features_selection",
                "train_time": 53.162566900253296
            },
            {
                "model_name": "28_ExtraTrees_SelectedFeatures",
                "model_type": "Extra Trees",
                "fit_level": "features_selection",
                "train_time": 57.56682562828064
            },
            {
                "model_name": "24_RandomForest_SelectedFeatures",
                "model_type": "Random Forest",
                "fit_level": "features_selection",
                "train_time": 58.1899688243866
            },
            {
                "model_name": "8_Default_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "features_selection",
                "train_time": 32.27484345436096
            },
            {
                "model_name": "35_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_1",
                "train_time": 346.7159731388092
            },
            {
                "model_name": "36_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_1",
                "train_time": 159.2078776359558
            },
            {
                "model_name": "37_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_1",
                "train_time": 120.83857035636902
            },
            {
                "model_name": "38_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_1",
                "train_time": 84.96447730064392
            },
            {
                "model_name": "39_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_1",
                "train_time": 105.30233216285706
            },
            {
                "model_name": "40_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_1",
                "train_time": 100.9118902683258
            },
            {
                "model_name": "41_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "hill_climbing_1",
                "train_time": 97.4385199546814
            },
            {
                "model_name": "42_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_1",
                "train_time": 128.09939074516296
            },
            {
                "model_name": "43_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_1",
                "train_time": 121.17450165748596
            },
            {
                "model_name": "44_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "hill_climbing_1",
                "train_time": 96.95623779296875
            },
            {
                "model_name": "45_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_1",
                "train_time": 36.3925347328186
            },
            {
                "model_name": "46_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_1",
                "train_time": 37.5464129447937
            },
            {
                "model_name": "47_ExtraTrees_SelectedFeatures",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_1",
                "train_time": 60.35067391395569
            },
            {
                "model_name": "48_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_1",
                "train_time": 131.74814629554749
            },
            {
                "model_name": "49_RandomForest_SelectedFeatures",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_1",
                "train_time": 58.90174412727356
            },
            {
                "model_name": "50_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_1",
                "train_time": 100.93492102622986
            },
            {
                "model_name": "51_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_1",
                "train_time": 45.08267664909363
            },
            {
                "model_name": "52_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_1",
                "train_time": 48.08539891242981
            },
            {
                "model_name": "53_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_2",
                "train_time": 101.35916209220886
            },
            {
                "model_name": "54_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_2",
                "train_time": 237.04826068878174
            },
            {
                "model_name": "55_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_2",
                "train_time": 495.3257119655609
            },
            {
                "model_name": "56_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_2",
                "train_time": 152.78917169570923
            },
            {
                "model_name": "57_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_2",
                "train_time": 218.2671995162964
            },
            {
                "model_name": "58_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_2",
                "train_time": 160.44491362571716
            },
            {
                "model_name": "59_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "hill_climbing_2",
                "train_time": 231.38876390457153
            },
            {
                "model_name": "60_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "hill_climbing_2",
                "train_time": 213.33502221107483
            },
            {
                "model_name": "61_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_2",
                "train_time": 68.94144558906555
            },
            {
                "model_name": "62_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_2",
                "train_time": 67.23289060592651
            },
            {
                "model_name": "63_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_2",
                "train_time": 71.13874411582947
            },
            {
                "model_name": "64_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_2",
                "train_time": 72.4577898979187
            },
            {
                "model_name": "65_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_2",
                "train_time": 207.58657670021057
            },
            {
                "model_name": "66_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_2",
                "train_time": 242.29569363594055
            },
            {
                "model_name": "67_ExtraTrees_SelectedFeatures",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_2",
                "train_time": 149.8591012954712
            },
            {
                "model_name": "68_ExtraTrees_SelectedFeatures",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_2",
                "train_time": 131.07422041893005
            },
            {
                "model_name": "69_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_2",
                "train_time": 217.41458368301392
            },
            {
                "model_name": "70_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_2",
                "train_time": 121.82092952728271
            },
            {
                "model_name": "71_RandomForest_SelectedFeatures",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_2",
                "train_time": 121.86147236824036
            },
            {
                "model_name": "72_RandomForest_SelectedFeatures",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_2",
                "train_time": 126.70556855201721
            },
            {
                "model_name": "Ensemble",
                "model_type": "Ensemble",
                "fit_level": "ensemble",
                "train_time": 68.84485411643982
            }
        ],
        "is_hill_climbing": true,
        "is_stacking": false
    },
    "all_params": {
        "simple_algorithms": [
            {
                "additional": {
                    "max_steps": 1,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Baseline",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "1_Baseline",
                "status": "trained",
                "final_loss": 0.5270465916200109,
                "train_time": 5.506021022796631,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 1,
                    "train_cant_improve_limit": 0,
                    "max_steps": 1,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Decision Tree",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "criterion": "gini",
                    "max_depth": 3,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "2_DecisionTree",
                "status": "trained",
                "final_loss": 0.2071411423846097,
                "train_time": 84.52262353897095,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 1,
                    "train_cant_improve_limit": 0,
                    "max_steps": 1,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Decision Tree",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_depth": 4,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "3_DecisionTree",
                "status": "trained",
                "final_loss": 0.194529620934452,
                "train_time": 72.77328896522522,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 1,
                    "train_cant_improve_limit": 0,
                    "max_steps": 1,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Decision Tree",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "criterion": "gini",
                    "max_depth": 4,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "4_DecisionTree",
                "status": "trained",
                "final_loss": 0.1976487945444771,
                "train_time": 68.49370050430298,
                "data_type": "original",
                "max_time_for_learner": 288.0
            }
        ],
        "default_algorithms": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 0.9,
                    "min_data_in_leaf": 10,
                    "seed": 5,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "5_Default_LightGBM",
                "status": "trained",
                "final_loss": 0.10746191492566134,
                "train_time": 119.01101016998291,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "6_Default_Xgboost",
                "status": "trained",
                "final_loss": 0.10099382746207537,
                "train_time": 110.72959733009338,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "learning_rate": 0.1,
                    "depth": 6,
                    "rsm": 1,
                    "loss_function": "Logloss",
                    "seed": 7,
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "7_Default_CatBoost",
                "status": "trained",
                "final_loss": 0.09854299553913275,
                "train_time": 81.74617648124695,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "8_Default_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.1460675935290947,
                "train_time": 30.67583703994751,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "criterion": "gini",
                    "max_features": 0.9,
                    "min_samples_split": 30,
                    "max_depth": 4,
                    "seed": 9,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "9_Default_RandomForest",
                "status": "trained",
                "final_loss": 0.15983810277618857,
                "train_time": 89.78652596473694,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "criterion": "gini",
                    "max_features": 0.9,
                    "min_samples_split": 30,
                    "max_depth": 4,
                    "seed": 10,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "10_Default_ExtraTrees",
                "status": "trained",
                "final_loss": 0.15342880587446273,
                "train_time": 84.54081201553345,
                "data_type": "original",
                "max_time_for_learner": 288.0
            }
        ],
        "not_so_random": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.8,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "15_LightGBM",
                "status": "trained",
                "final_loss": 0.09884344268096198,
                "train_time": 73.21953439712524,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 8,
                    "min_child_weight": 5,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "11_Xgboost",
                "status": "trained",
                "final_loss": 0.10362554931718339,
                "train_time": 86.60355567932129,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.05,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "19_CatBoost",
                "status": "trained",
                "final_loss": 0.09799693147563461,
                "train_time": 202.30276012420654,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "criterion": "gini",
                    "max_features": 0.5,
                    "min_samples_split": 20,
                    "max_depth": 4,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "23_RandomForest",
                "status": "trained",
                "final_loss": 0.14269619853248697,
                "train_time": 95.17919683456421,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "criterion": "gini",
                    "max_features": 0.5,
                    "min_samples_split": 20,
                    "max_depth": 4,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "27_ExtraTrees",
                "status": "trained",
                "final_loss": 0.17971418451212526,
                "train_time": 82.00042510032654,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "dense_1_size": 32,
                    "dense_2_size": 4,
                    "learning_rate": 0.05,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "31_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.1512231358881968,
                "train_time": 29.74799108505249,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.2,
                    "feature_fraction": 0.5,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 10,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "16_LightGBM",
                "status": "trained",
                "final_loss": 0.10224896382046506,
                "train_time": 74.77728772163391,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 8,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "12_Xgboost",
                "status": "trained",
                "final_loss": 0.10304509471300108,
                "train_time": 104.15223860740662,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "learning_rate": 0.1,
                    "depth": 8,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "20_CatBoost",
                "status": "trained",
                "final_loss": 0.09948455514345025,
                "train_time": 114.60941123962402,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "24_RandomForest",
                "status": "trained",
                "final_loss": 0.1298618903740163,
                "train_time": 129.40168929100037,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "28_ExtraTrees",
                "status": "trained",
                "final_loss": 0.12515234531490751,
                "train_time": 111.4772698879242,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "dense_1_size": 64,
                    "dense_2_size": 16,
                    "learning_rate": 0.01,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "32_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.16359370517924163,
                "train_time": 38.83287024497986,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 20,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "17_LightGBM",
                "status": "trained",
                "final_loss": 0.10189899433457454,
                "train_time": 101.98331999778748,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 7,
                    "min_child_weight": 25,
                    "subsample": 0.9,
                    "colsample_bytree": 0.6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "13_Xgboost",
                "status": "trained",
                "final_loss": 0.1357406008924863,
                "train_time": 87.61041808128357,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "learning_rate": 0.1,
                    "depth": 7,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "21_CatBoost",
                "status": "trained",
                "final_loss": 0.09841741116268035,
                "train_time": 103.67518162727356,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "criterion": "gini",
                    "max_features": 0.8,
                    "min_samples_split": 40,
                    "max_depth": 3,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "25_RandomForest",
                "status": "trained",
                "final_loss": 0.1722959704342053,
                "train_time": 117.53186678886414,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "criterion": "gini",
                    "max_features": 0.8,
                    "min_samples_split": 40,
                    "max_depth": 3,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "29_ExtraTrees",
                "status": "trained",
                "final_loss": 0.17668893015039913,
                "train_time": 83.38847303390503,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "dense_1_size": 64,
                    "dense_2_size": 32,
                    "learning_rate": 0.08,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "33_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.17640468337605467,
                "train_time": 38.95687508583069,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "objective": "binary",
                    "num_leaves": 95,
                    "learning_rate": 0.05,
                    "feature_fraction": 1.0,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 10,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "18_LightGBM",
                "status": "trained",
                "final_loss": 0.11150863724626256,
                "train_time": 107.5758228302002,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "objective": "binary:logistic",
                    "eta": 0.15,
                    "max_depth": 8,
                    "min_child_weight": 50,
                    "subsample": 0.6,
                    "colsample_bytree": 0.6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "14_Xgboost",
                "status": "trained",
                "final_loss": 0.21398288063396814,
                "train_time": 74.83079242706299,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "learning_rate": 0.2,
                    "depth": 8,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "22_CatBoost",
                "status": "trained",
                "final_loss": 0.09966053420807122,
                "train_time": 82.38973259925842,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 50,
                    "max_depth": 6,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "26_RandomForest",
                "status": "trained",
                "final_loss": 0.13407250796672893,
                "train_time": 144.93966150283813,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 50,
                    "max_depth": 6,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "30_ExtraTrees",
                "status": "trained",
                "final_loss": 0.1348681240467119,
                "train_time": 92.62730240821838,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "dense_1_size": 32,
                    "dense_2_size": 32,
                    "learning_rate": 0.05,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "34_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.1772724755863888,
                "train_time": 42.12192964553833,
                "data_type": "original",
                "max_time_for_learner": 288.0
            }
        ],
        "golden_features": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "golden_features": {
                        "results_path": "AutoML_3",
                        "ml_task": "binary_classification"
                    }
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.05,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "19_CatBoost_GoldenFeatures",
                "status": "trained",
                "final_loss": 0.09853364385685333,
                "train_time": 300.40876722335815,
                "data_type": "original_golden_features",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "golden_features": {
                        "results_path": "AutoML_3",
                        "ml_task": "binary_classification"
                    }
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "learning_rate": 0.1,
                    "depth": 7,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "21_CatBoost_GoldenFeatures",
                "status": "trained",
                "final_loss": 0.09884632715697385,
                "train_time": 128.73005747795105,
                "data_type": "original_golden_features",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "golden_features": {
                        "results_path": "AutoML_3",
                        "ml_task": "binary_classification"
                    }
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "learning_rate": 0.1,
                    "depth": 6,
                    "rsm": 1,
                    "loss_function": "Logloss",
                    "seed": 7,
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "7_Default_CatBoost_GoldenFeatures",
                "status": "trained",
                "final_loss": 0.09923901653462197,
                "train_time": 101.82340502738953,
                "data_type": "original_golden_features",
                "max_time_for_learner": 288.0
            }
        ],
        "insert_random_feature": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "add_random_feature": true
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.05,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 1
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 1,
                "name": "19_CatBoost_RandomFeature",
                "status": "trained",
                "final_loss": 0.09860247432580319,
                "train_time": 217.45612692832947,
                "data_type": "original",
                "max_time_for_learner": 288.0
            }
        ],
        "features_selection": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.05,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "19_CatBoost_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.10162395512197923,
                "train_time": 62.15438652038574,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.8,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "15_LightGBM_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.10366625037474271,
                "train_time": 48.99091863632202,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "6_Default_Xgboost_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.10568124811449611,
                "train_time": 54.83324193954468,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "28_ExtraTrees_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12505245726324227,
                "train_time": 59.1654794216156,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "24_RandomForest_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12912177675462683,
                "train_time": 59.86863946914673,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "8_Default_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12175914771012901,
                "train_time": 33.56478261947632,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            }
        ],
        "hill_climbing_1": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.025,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "35_CatBoost",
                "status": "trained",
                "final_loss": 0.0974628386195834,
                "train_time": 348.0422246456146,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.1,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "36_CatBoost",
                "status": "trained",
                "final_loss": 0.09785294615941546,
                "train_time": 160.5743865966797,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "learning_rate": 0.05,
                    "depth": 7,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "37_CatBoost",
                "status": "trained",
                "final_loss": 0.0991277256135997,
                "train_time": 122.54821825027466,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "learning_rate": 0.2,
                    "depth": 7,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "38_CatBoost",
                "status": "trained",
                "final_loss": 0.09795652705776717,
                "train_time": 86.26044726371765,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.5,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "39_LightGBM",
                "status": "trained",
                "final_loss": 0.0968040222667778,
                "train_time": 106.98024463653564,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "40_LightGBM",
                "status": "trained",
                "final_loss": 0.0979929248996451,
                "train_time": 102.51850032806396,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 5,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "41_Xgboost",
                "status": "trained",
                "final_loss": 0.10351451823451988,
                "train_time": 99.10629558563232,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.8,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 20,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "42_LightGBM",
                "status": "trained",
                "final_loss": 0.10001675357774652,
                "train_time": 129.7285852432251,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 1.0,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 20,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "43_LightGBM",
                "status": "trained",
                "final_loss": 0.10453202611778802,
                "train_time": 122.8409276008606,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 8,
                    "min_child_weight": 5,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "44_Xgboost",
                "status": "trained",
                "final_loss": 0.10331440185327474,
                "train_time": 98.61018395423889,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "45_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.11846150632718075,
                "train_time": 37.59178113937378,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 64,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "46_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.13875285548600289,
                "train_time": 38.74448585510254,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "47_ExtraTrees_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12407897727130533,
                "train_time": 62.02665877342224,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "48_ExtraTrees",
                "status": "trained",
                "final_loss": 0.12280241787935897,
                "train_time": 133.35340404510498,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "49_RandomForest_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12654808606880408,
                "train_time": 60.700549840927124,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "50_RandomForest",
                "status": "trained",
                "final_loss": 0.1254636655361091,
                "train_time": 102.6137387752533,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "51_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.20410679940786824,
                "train_time": 46.394938707351685,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 64,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "52_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.13496521583936724,
                "train_time": 49.48764657974243,
                "data_type": "original",
                "max_time_for_learner": 288.0
            }
        ],
        "hill_climbing_2": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.5,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 30,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "53_LightGBM",
                "status": "trained",
                "final_loss": 0.09320608015349714,
                "train_time": 103.03212261199951,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.025,
                    "depth": 7,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "54_CatBoost",
                "status": "trained",
                "final_loss": 0.0981721813504801,
                "train_time": 238.4687602519989,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.025,
                    "depth": 9,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "55_CatBoost",
                "status": "trained",
                "final_loss": 0.09644962771075538,
                "train_time": 496.7442626953125,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.1,
                    "depth": 7,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "56_CatBoost",
                "status": "trained",
                "final_loss": 0.09880280525352605,
                "train_time": 154.2712709903717,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.1,
                    "depth": 9,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "57_CatBoost",
                "status": "trained",
                "final_loss": 0.09784817658093899,
                "train_time": 219.6553189754486,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 30,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "58_LightGBM",
                "status": "trained",
                "final_loss": 0.09670910359458648,
                "train_time": 164.97156310081482,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 0.9,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "59_Xgboost",
                "status": "trained",
                "final_loss": 0.10014799116717356,
                "train_time": 235.6219892501831,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 8,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 0.9,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "60_Xgboost",
                "status": "trained",
                "final_loss": 0.10394783815879444,
                "train_time": 218.4926655292511,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 8,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "61_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.1305214525602935,
                "train_time": 72.35596966743469,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 32,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "62_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.11969450997606575,
                "train_time": 71.03198528289795,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 8,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "63_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.1385762585577744,
                "train_time": 74.61064267158508,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 32,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "64_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12846235772419276,
                "train_time": 76.0006890296936,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "65_ExtraTrees",
                "status": "trained",
                "final_loss": 0.12363327515772873,
                "train_time": 212.19011807441711,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "66_ExtraTrees",
                "status": "trained",
                "final_loss": 0.12246414399466303,
                "train_time": 246.78714203834534,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "67_ExtraTrees_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.1283933463814249,
                "train_time": 155.96783423423767,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "68_ExtraTrees_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12368316173123922,
                "train_time": 136.44792437553406,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "69_RandomForest",
                "status": "trained",
                "final_loss": 0.12447471692263247,
                "train_time": 221.8708188533783,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "70_RandomForest",
                "status": "trained",
                "final_loss": 0.12640598367823316,
                "train_time": 126.4537603855133,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "71_RandomForest_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12068785046298898,
                "train_time": 125.75465965270996,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "72_RandomForest_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12232359975264281,
                "train_time": 131.28845882415771,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            }
        ],
        "ensemble": [
            {
                "model_type": "ensemble",
                "is_stacked": false,
                "name": "Ensemble",
                "status": "trained",
                "final_loss": 0.08270782553394365,
                "train_time": 68.84485411643982
            }
        ]
    },
    "adjust_validation": false
}