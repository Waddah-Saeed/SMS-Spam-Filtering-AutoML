{
    "fit_level": "finished",
    "time_controller": {
        "total_time_limit": 14400,
        "model_time_limit": null,
        "steps": [
            "simple_algorithms",
            "default_algorithms",
            "not_so_random",
            "golden_features",
            "insert_random_feature",
            "features_selection",
            "hill_climbing_1",
            "hill_climbing_2",
            "ensemble",
            "stack",
            "ensemble_stacked"
        ],
        "algorithms": [
            "Baseline",
            "Decision Tree",
            "Random Forest",
            "Xgboost",
            "LightGBM",
            "CatBoost",
            "Extra Trees",
            "Neural Network",
            "Nearest Neighbors"
        ],
        "spend": [
            {
                "model_name": "prepare_data",
                "model_type": "prepare_data",
                "fit_level": "prepare_data",
                "train_time": 47.63721680641174
            },
            {
                "model_name": "1_Baseline",
                "model_type": "Baseline",
                "fit_level": "simple_algorithms",
                "train_time": 3.850827693939209
            },
            {
                "model_name": "2_DecisionTree",
                "model_type": "Decision Tree",
                "fit_level": "simple_algorithms",
                "train_time": 61.29760122299194
            },
            {
                "model_name": "3_DecisionTree",
                "model_type": "Decision Tree",
                "fit_level": "simple_algorithms",
                "train_time": 51.886250257492065
            },
            {
                "model_name": "4_DecisionTree",
                "model_type": "Decision Tree",
                "fit_level": "simple_algorithms",
                "train_time": 53.724613904953
            },
            {
                "model_name": "5_Default_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "default_algorithms",
                "train_time": 92.71543574333191
            },
            {
                "model_name": "6_Default_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "default_algorithms",
                "train_time": 94.5539939403534
            },
            {
                "model_name": "7_Default_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "default_algorithms",
                "train_time": 76.94894075393677
            },
            {
                "model_name": "8_Default_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "default_algorithms",
                "train_time": 29.332523822784424
            },
            {
                "model_name": "9_Default_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "default_algorithms",
                "train_time": 82.70197057723999
            },
            {
                "model_name": "10_Default_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "default_algorithms",
                "train_time": 87.52597188949585
            },
            {
                "model_name": "15_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "not_so_random",
                "train_time": 77.04716944694519
            },
            {
                "model_name": "11_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "not_so_random",
                "train_time": 81.975909948349
            },
            {
                "model_name": "19_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "not_so_random",
                "train_time": 199.28330254554749
            },
            {
                "model_name": "23_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "not_so_random",
                "train_time": 91.54177117347717
            },
            {
                "model_name": "27_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "not_so_random",
                "train_time": 80.05111289024353
            },
            {
                "model_name": "31_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "not_so_random",
                "train_time": 30.12771701812744
            },
            {
                "model_name": "16_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "not_so_random",
                "train_time": 67.60830283164978
            },
            {
                "model_name": "12_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "not_so_random",
                "train_time": 90.21977257728577
            },
            {
                "model_name": "20_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "not_so_random",
                "train_time": 102.89466547966003
            },
            {
                "model_name": "24_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "not_so_random",
                "train_time": 120.75004577636719
            },
            {
                "model_name": "28_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "not_so_random",
                "train_time": 110.54990887641907
            },
            {
                "model_name": "32_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "not_so_random",
                "train_time": 50.19089341163635
            },
            {
                "model_name": "17_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "not_so_random",
                "train_time": 160.4394929409027
            },
            {
                "model_name": "13_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "not_so_random",
                "train_time": 103.43597173690796
            },
            {
                "model_name": "21_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "not_so_random",
                "train_time": 112.27745747566223
            },
            {
                "model_name": "25_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "not_so_random",
                "train_time": 137.3374092578888
            },
            {
                "model_name": "29_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "not_so_random",
                "train_time": 100.48283314704895
            },
            {
                "model_name": "33_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "not_so_random",
                "train_time": 54.04025340080261
            },
            {
                "model_name": "18_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "not_so_random",
                "train_time": 172.2881588935852
            },
            {
                "model_name": "14_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "not_so_random",
                "train_time": 119.40934634208679
            },
            {
                "model_name": "22_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "not_so_random",
                "train_time": 129.34196400642395
            },
            {
                "model_name": "26_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "not_so_random",
                "train_time": 198.2092080116272
            },
            {
                "model_name": "30_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "not_so_random",
                "train_time": 103.97399878501892
            },
            {
                "model_name": "34_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "not_so_random",
                "train_time": 47.84526443481445
            },
            {
                "model_name": "19_CatBoost_GoldenFeatures",
                "model_type": "CatBoost",
                "fit_level": "golden_features",
                "train_time": 345.78860545158386
            },
            {
                "model_name": "21_CatBoost_GoldenFeatures",
                "model_type": "CatBoost",
                "fit_level": "golden_features",
                "train_time": 137.80006790161133
            },
            {
                "model_name": "7_Default_CatBoost_GoldenFeatures",
                "model_type": "CatBoost",
                "fit_level": "golden_features",
                "train_time": 126.21596002578735
            },
            {
                "model_name": "19_CatBoost_RandomFeature",
                "model_type": "CatBoost",
                "fit_level": "insert_random_feature",
                "train_time": 231.0998079776764
            },
            {
                "model_name": "19_CatBoost_SelectedFeatures",
                "model_type": "CatBoost",
                "fit_level": "features_selection",
                "train_time": 68.18931412696838
            },
            {
                "model_name": "15_LightGBM_SelectedFeatures",
                "model_type": "LightGBM",
                "fit_level": "features_selection",
                "train_time": 53.10520935058594
            },
            {
                "model_name": "6_Default_Xgboost_SelectedFeatures",
                "model_type": "Xgboost",
                "fit_level": "features_selection",
                "train_time": 58.736977338790894
            },
            {
                "model_name": "28_ExtraTrees_SelectedFeatures",
                "model_type": "Extra Trees",
                "fit_level": "features_selection",
                "train_time": 57.59111428260803
            },
            {
                "model_name": "24_RandomForest_SelectedFeatures",
                "model_type": "Random Forest",
                "fit_level": "features_selection",
                "train_time": 62.34723138809204
            },
            {
                "model_name": "8_Default_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "features_selection",
                "train_time": 34.94959831237793
            },
            {
                "model_name": "35_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_1",
                "train_time": 330.3970537185669
            },
            {
                "model_name": "36_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_1",
                "train_time": 153.33255553245544
            },
            {
                "model_name": "37_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_1",
                "train_time": 132.9695179462433
            },
            {
                "model_name": "38_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_1",
                "train_time": 106.06928014755249
            },
            {
                "model_name": "39_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_1",
                "train_time": 113.85409832000732
            },
            {
                "model_name": "40_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_1",
                "train_time": 108.70976305007935
            },
            {
                "model_name": "41_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "hill_climbing_1",
                "train_time": 105.09181785583496
            },
            {
                "model_name": "42_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_1",
                "train_time": 135.59461736679077
            },
            {
                "model_name": "43_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_1",
                "train_time": 132.40386533737183
            },
            {
                "model_name": "44_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "hill_climbing_1",
                "train_time": 112.29030013084412
            },
            {
                "model_name": "45_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_1",
                "train_time": 37.576382875442505
            },
            {
                "model_name": "46_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_1",
                "train_time": 38.5160391330719
            },
            {
                "model_name": "47_ExtraTrees_SelectedFeatures",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_1",
                "train_time": 62.949382066726685
            },
            {
                "model_name": "48_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_1",
                "train_time": 140.38643407821655
            },
            {
                "model_name": "49_RandomForest_SelectedFeatures",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_1",
                "train_time": 63.88129210472107
            },
            {
                "model_name": "50_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_1",
                "train_time": 109.31803584098816
            },
            {
                "model_name": "51_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_1",
                "train_time": 51.73582601547241
            },
            {
                "model_name": "52_NeuralNetwork",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_1",
                "train_time": 59.01184034347534
            },
            {
                "model_name": "53_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_2",
                "train_time": 117.13413095474243
            },
            {
                "model_name": "54_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_2",
                "train_time": 209.070139169693
            },
            {
                "model_name": "55_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_2",
                "train_time": 496.3083517551422
            },
            {
                "model_name": "56_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_2",
                "train_time": 127.9663724899292
            },
            {
                "model_name": "57_CatBoost",
                "model_type": "CatBoost",
                "fit_level": "hill_climbing_2",
                "train_time": 218.6893208026886
            },
            {
                "model_name": "58_LightGBM",
                "model_type": "LightGBM",
                "fit_level": "hill_climbing_2",
                "train_time": 120.80317950248718
            },
            {
                "model_name": "59_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "hill_climbing_2",
                "train_time": 127.17904734611511
            },
            {
                "model_name": "60_Xgboost",
                "model_type": "Xgboost",
                "fit_level": "hill_climbing_2",
                "train_time": 124.41929626464844
            },
            {
                "model_name": "61_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_2",
                "train_time": 43.10878586769104
            },
            {
                "model_name": "62_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_2",
                "train_time": 44.286630392074585
            },
            {
                "model_name": "63_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_2",
                "train_time": 46.12177586555481
            },
            {
                "model_name": "64_NeuralNetwork_SelectedFeatures",
                "model_type": "Neural Network",
                "fit_level": "hill_climbing_2",
                "train_time": 50.3240704536438
            },
            {
                "model_name": "65_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_2",
                "train_time": 141.64768838882446
            },
            {
                "model_name": "66_ExtraTrees",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_2",
                "train_time": 163.79244089126587
            },
            {
                "model_name": "67_ExtraTrees_SelectedFeatures",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_2",
                "train_time": 96.39424395561218
            },
            {
                "model_name": "68_ExtraTrees_SelectedFeatures",
                "model_type": "Extra Trees",
                "fit_level": "hill_climbing_2",
                "train_time": 87.03097105026245
            },
            {
                "model_name": "69_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_2",
                "train_time": 146.76410102844238
            },
            {
                "model_name": "70_RandomForest",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_2",
                "train_time": 127.40003252029419
            },
            {
                "model_name": "71_RandomForest_SelectedFeatures",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_2",
                "train_time": 74.26076793670654
            },
            {
                "model_name": "72_RandomForest_SelectedFeatures",
                "model_type": "Random Forest",
                "fit_level": "hill_climbing_2",
                "train_time": 83.33279395103455
            },
            {
                "model_name": "Ensemble",
                "model_type": "Ensemble",
                "fit_level": "ensemble",
                "train_time": 39.79534339904785
            },
            {
                "model_name": "53_LightGBM_Stacked",
                "model_type": "LightGBM",
                "fit_level": "stack",
                "train_time": 145.4827914237976
            },
            {
                "model_name": "55_CatBoost_Stacked",
                "model_type": "CatBoost",
                "fit_level": "stack",
                "train_time": 340.9551901817322
            },
            {
                "model_name": "59_Xgboost_Stacked",
                "model_type": "Xgboost",
                "fit_level": "stack",
                "train_time": 154.58291482925415
            },
            {
                "model_name": "45_NeuralNetwork_SelectedFeatures_Stacked",
                "model_type": "Neural Network",
                "fit_level": "stack",
                "train_time": 57.47736692428589
            },
            {
                "model_name": "71_RandomForest_SelectedFeatures_Stacked",
                "model_type": "Random Forest",
                "fit_level": "stack",
                "train_time": 111.47784900665283
            },
            {
                "model_name": "66_ExtraTrees_Stacked",
                "model_type": "Extra Trees",
                "fit_level": "stack",
                "train_time": 187.57657718658447
            },
            {
                "model_name": "58_LightGBM_Stacked",
                "model_type": "LightGBM",
                "fit_level": "stack",
                "train_time": 133.86163806915283
            },
            {
                "model_name": "35_CatBoost_Stacked",
                "model_type": "CatBoost",
                "fit_level": "stack",
                "train_time": 246.54833054542542
            },
            {
                "model_name": "6_Default_Xgboost_Stacked",
                "model_type": "Xgboost",
                "fit_level": "stack",
                "train_time": 162.65738224983215
            },
            {
                "model_name": "62_NeuralNetwork_SelectedFeatures_Stacked",
                "model_type": "Neural Network",
                "fit_level": "stack",
                "train_time": 59.49693942070007
            },
            {
                "model_name": "72_RandomForest_SelectedFeatures_Stacked",
                "model_type": "Random Forest",
                "fit_level": "stack",
                "train_time": 125.78980588912964
            },
            {
                "model_name": "48_ExtraTrees_Stacked",
                "model_type": "Extra Trees",
                "fit_level": "stack",
                "train_time": 192.2746193408966
            },
            {
                "model_name": "39_LightGBM_Stacked",
                "model_type": "LightGBM",
                "fit_level": "stack",
                "train_time": 138.65552687644958
            },
            {
                "model_name": "57_CatBoost_Stacked",
                "model_type": "CatBoost",
                "fit_level": "stack",
                "train_time": 224.22927021980286
            },
            {
                "model_name": "12_Xgboost_Stacked",
                "model_type": "Xgboost",
                "fit_level": "stack",
                "train_time": 161.44204902648926
            },
            {
                "model_name": "8_Default_NeuralNetwork_SelectedFeatures_Stacked",
                "model_type": "Neural Network",
                "fit_level": "stack",
                "train_time": 61.359633922576904
            },
            {
                "model_name": "69_RandomForest_Stacked",
                "model_type": "Random Forest",
                "fit_level": "stack",
                "train_time": 202.52684617042542
            },
            {
                "model_name": "65_ExtraTrees_Stacked",
                "model_type": "Extra Trees",
                "fit_level": "stack",
                "train_time": 151.6883029937744
            },
            {
                "model_name": "40_LightGBM_Stacked",
                "model_type": "LightGBM",
                "fit_level": "stack",
                "train_time": 140.5210723876953
            },
            {
                "model_name": "36_CatBoost_Stacked",
                "model_type": "CatBoost",
                "fit_level": "stack",
                "train_time": 177.70385670661926
            },
            {
                "model_name": "44_Xgboost_Stacked",
                "model_type": "Xgboost",
                "fit_level": "stack",
                "train_time": 154.27207374572754
            },
            {
                "model_name": "64_NeuralNetwork_SelectedFeatures_Stacked",
                "model_type": "Neural Network",
                "fit_level": "stack",
                "train_time": 66.97935080528259
            },
            {
                "model_name": "50_RandomForest_Stacked",
                "model_type": "Random Forest",
                "fit_level": "stack",
                "train_time": 314.1125204563141
            },
            {
                "model_name": "68_ExtraTrees_SelectedFeatures_Stacked",
                "model_type": "Extra Trees",
                "fit_level": "stack",
                "train_time": 229.1648712158203
            },
            {
                "model_name": "15_LightGBM_Stacked",
                "model_type": "LightGBM",
                "fit_level": "stack",
                "train_time": 255.6063780784607
            },
            {
                "model_name": "38_CatBoost_Stacked",
                "model_type": "CatBoost",
                "fit_level": "stack",
                "train_time": 191.6585464477539
            },
            {
                "model_name": "41_Xgboost_Stacked",
                "model_type": "Xgboost",
                "fit_level": "stack",
                "train_time": 281.9145305156708
            },
            {
                "model_name": "61_NeuralNetwork_SelectedFeatures_Stacked",
                "model_type": "Neural Network",
                "fit_level": "stack",
                "train_time": 114.28538250923157
            },
            {
                "model_name": "70_RandomForest_Stacked",
                "model_type": "Random Forest",
                "fit_level": "stack",
                "train_time": 330.30496048927307
            },
            {
                "model_name": "Ensemble_Stacked",
                "model_type": "Ensemble",
                "fit_level": "ensemble_stacked",
                "train_time": 144.53800463676453
            }
        ],
        "is_hill_climbing": true,
        "is_stacking": true
    },
    "all_params": {
        "simple_algorithms": [
            {
                "additional": {
                    "max_steps": 1,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Baseline",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "1_Baseline",
                "status": "trained",
                "final_loss": 0.5270465916200109,
                "train_time": 5.356801986694336,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 1,
                    "train_cant_improve_limit": 0,
                    "max_steps": 1,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Decision Tree",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "criterion": "gini",
                    "max_depth": 3,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "2_DecisionTree",
                "status": "trained",
                "final_loss": 0.2071411423846097,
                "train_time": 63.08322834968567,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 1,
                    "train_cant_improve_limit": 0,
                    "max_steps": 1,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Decision Tree",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_depth": 4,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "3_DecisionTree",
                "status": "trained",
                "final_loss": 0.194529620934452,
                "train_time": 53.64615726470947,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 1,
                    "train_cant_improve_limit": 0,
                    "max_steps": 1,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Decision Tree",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "criterion": "gini",
                    "max_depth": 4,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "4_DecisionTree",
                "status": "trained",
                "final_loss": 0.1976487945444771,
                "train_time": 55.36106848716736,
                "data_type": "original",
                "max_time_for_learner": 288.0
            }
        ],
        "default_algorithms": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 0.9,
                    "min_data_in_leaf": 10,
                    "seed": 5,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "5_Default_LightGBM",
                "status": "trained",
                "final_loss": 0.10746191492566134,
                "train_time": 94.3922700881958,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "6_Default_Xgboost",
                "status": "trained",
                "final_loss": 0.10099382746207537,
                "train_time": 96.28662371635437,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "learning_rate": 0.1,
                    "depth": 6,
                    "rsm": 1,
                    "loss_function": "Logloss",
                    "seed": 7,
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "7_Default_CatBoost",
                "status": "trained",
                "final_loss": 0.09854299553913275,
                "train_time": 78.68430852890015,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "8_Default_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.1460675935290947,
                "train_time": 30.87732696533203,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "criterion": "gini",
                    "max_features": 0.9,
                    "min_samples_split": 30,
                    "max_depth": 4,
                    "seed": 9,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "9_Default_RandomForest",
                "status": "trained",
                "final_loss": 0.1598381027761886,
                "train_time": 84.26843738555908,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "criterion": "gini",
                    "max_features": 0.9,
                    "min_samples_split": 30,
                    "max_depth": 4,
                    "seed": 10,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "10_Default_ExtraTrees",
                "status": "trained",
                "final_loss": 0.15342880587446273,
                "train_time": 89.07108545303345,
                "data_type": "original",
                "max_time_for_learner": 288.0
            }
        ],
        "not_so_random": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.8,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "15_LightGBM",
                "status": "trained",
                "final_loss": 0.09884344268096198,
                "train_time": 78.60139226913452,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 8,
                    "min_child_weight": 5,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "11_Xgboost",
                "status": "trained",
                "final_loss": 0.10362554931718339,
                "train_time": 83.55006527900696,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.05,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "19_CatBoost",
                "status": "trained",
                "final_loss": 0.09799693147563461,
                "train_time": 201.03458642959595,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "criterion": "gini",
                    "max_features": 0.5,
                    "min_samples_split": 20,
                    "max_depth": 4,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "23_RandomForest",
                "status": "trained",
                "final_loss": 0.1426961985324869,
                "train_time": 93.18372869491577,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "criterion": "gini",
                    "max_features": 0.5,
                    "min_samples_split": 20,
                    "max_depth": 4,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "27_ExtraTrees",
                "status": "trained",
                "final_loss": 0.1797141845121253,
                "train_time": 81.69194436073303,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "dense_1_size": 32,
                    "dense_2_size": 4,
                    "learning_rate": 0.05,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "31_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.1512231358881968,
                "train_time": 31.335390090942383,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.2,
                    "feature_fraction": 0.5,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 10,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "16_LightGBM",
                "status": "trained",
                "final_loss": 0.10224896382046506,
                "train_time": 69.14555788040161,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 8,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "12_Xgboost",
                "status": "trained",
                "final_loss": 0.10304509471300108,
                "train_time": 91.80785489082336,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "learning_rate": 0.1,
                    "depth": 8,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "20_CatBoost",
                "status": "trained",
                "final_loss": 0.09948455514345025,
                "train_time": 104.5168068408966,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "24_RandomForest",
                "status": "trained",
                "final_loss": 0.1298618903740163,
                "train_time": 122.4233787059784,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "28_ExtraTrees",
                "status": "trained",
                "final_loss": 0.12515234531490751,
                "train_time": 113.16495323181152,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "dense_1_size": 64,
                    "dense_2_size": 16,
                    "learning_rate": 0.01,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "32_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.16359370517924163,
                "train_time": 51.79158353805542,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 20,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "17_LightGBM",
                "status": "trained",
                "final_loss": 0.10189899433457454,
                "train_time": 162.1445939540863,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 7,
                    "min_child_weight": 25,
                    "subsample": 0.9,
                    "colsample_bytree": 0.6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "13_Xgboost",
                "status": "trained",
                "final_loss": 0.1357406008924863,
                "train_time": 105.33393979072571,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "learning_rate": 0.1,
                    "depth": 7,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "21_CatBoost",
                "status": "trained",
                "final_loss": 0.09841741116268035,
                "train_time": 113.95551180839539,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "criterion": "gini",
                    "max_features": 0.8,
                    "min_samples_split": 40,
                    "max_depth": 3,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "25_RandomForest",
                "status": "trained",
                "final_loss": 0.17229597043420533,
                "train_time": 139.28405356407166,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "criterion": "gini",
                    "max_features": 0.8,
                    "min_samples_split": 40,
                    "max_depth": 3,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "29_ExtraTrees",
                "status": "trained",
                "final_loss": 0.1766889301503991,
                "train_time": 102.63113903999329,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "dense_1_size": 64,
                    "dense_2_size": 32,
                    "learning_rate": 0.08,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "33_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.17640468337605467,
                "train_time": 56.245357513427734,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "objective": "binary",
                    "num_leaves": 95,
                    "learning_rate": 0.05,
                    "feature_fraction": 1.0,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 10,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "18_LightGBM",
                "status": "trained",
                "final_loss": 0.11150863724626256,
                "train_time": 175.82566261291504,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "objective": "binary:logistic",
                    "eta": 0.15,
                    "max_depth": 8,
                    "min_child_weight": 50,
                    "subsample": 0.6,
                    "colsample_bytree": 0.6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "14_Xgboost",
                "status": "trained",
                "final_loss": 0.21398288063396814,
                "train_time": 122.37342119216919,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "learning_rate": 0.2,
                    "depth": 8,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "22_CatBoost",
                "status": "trained",
                "final_loss": 0.09966053420807122,
                "train_time": 133.96061897277832,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 50,
                    "max_depth": 6,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "26_RandomForest",
                "status": "trained",
                "final_loss": 0.13407250796672893,
                "train_time": 200.4486207962036,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 50,
                    "max_depth": 6,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "30_ExtraTrees",
                "status": "trained",
                "final_loss": 0.13486812404671186,
                "train_time": 106.1713035106659,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "dense_1_size": 32,
                    "dense_2_size": 32,
                    "learning_rate": 0.05,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "34_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.1772724755863888,
                "train_time": 49.18038535118103,
                "data_type": "original",
                "max_time_for_learner": 288.0
            }
        ],
        "golden_features": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "golden_features": {
                        "results_path": "AutoML_3",
                        "ml_task": "binary_classification"
                    }
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.05,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "19_CatBoost_GoldenFeatures",
                "status": "trained",
                "final_loss": 0.09853364385685333,
                "train_time": 347.2563738822937,
                "data_type": "original_golden_features",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "golden_features": {
                        "results_path": "AutoML_3",
                        "ml_task": "binary_classification"
                    }
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "learning_rate": 0.1,
                    "depth": 7,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "21_CatBoost_GoldenFeatures",
                "status": "trained",
                "final_loss": 0.09884632715697385,
                "train_time": 139.5603792667389,
                "data_type": "original_golden_features",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "golden_features": {
                        "results_path": "AutoML_3",
                        "ml_task": "binary_classification"
                    }
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "learning_rate": 0.1,
                    "depth": 6,
                    "rsm": 1,
                    "loss_function": "Logloss",
                    "seed": 7,
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "7_Default_CatBoost_GoldenFeatures",
                "status": "trained",
                "final_loss": 0.09923901653462197,
                "train_time": 129.15111184120178,
                "data_type": "original_golden_features",
                "max_time_for_learner": 288.0
            }
        ],
        "insert_random_feature": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "add_random_feature": true
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.05,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 1
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 1,
                "name": "19_CatBoost_RandomFeature",
                "status": "trained",
                "final_loss": 0.09860247432580319,
                "train_time": 232.68798565864563,
                "data_type": "original",
                "max_time_for_learner": 288.0
            }
        ],
        "features_selection": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.05,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "19_CatBoost_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.10162395512197923,
                "train_time": 69.55730867385864,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.8,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "15_LightGBM_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.10366625037474271,
                "train_time": 55.81226921081543,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "6_Default_Xgboost_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.10568124811449611,
                "train_time": 60.574357748031616,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "28_ExtraTrees_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.1250524572632422,
                "train_time": 59.41998076438904,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "24_RandomForest_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12912177675462683,
                "train_time": 64.01668667793274,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "8_Default_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12175914771012901,
                "train_time": 36.278080224990845,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            }
        ],
        "hill_climbing_1": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.025,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "35_CatBoost",
                "status": "trained",
                "final_loss": 0.0974628386195834,
                "train_time": 331.75433897972107,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.1,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "36_CatBoost",
                "status": "trained",
                "final_loss": 0.09785294615941546,
                "train_time": 154.7050702571869,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "learning_rate": 0.05,
                    "depth": 7,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "37_CatBoost",
                "status": "trained",
                "final_loss": 0.0991277256135997,
                "train_time": 134.42088747024536,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "learning_rate": 0.2,
                    "depth": 7,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "38_CatBoost",
                "status": "trained",
                "final_loss": 0.09795652705776717,
                "train_time": 107.85251712799072,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.5,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "39_LightGBM",
                "status": "trained",
                "final_loss": 0.0968040222667778,
                "train_time": 115.59822130203247,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "40_LightGBM",
                "status": "trained",
                "final_loss": 0.0979929248996451,
                "train_time": 110.67485523223877,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 5,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "41_Xgboost",
                "status": "trained",
                "final_loss": 0.10351451823451988,
                "train_time": 107.17486786842346,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.8,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 20,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "42_LightGBM",
                "status": "trained",
                "final_loss": 0.10001675357774652,
                "train_time": 137.3090901374817,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 1.0,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 20,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "43_LightGBM",
                "status": "trained",
                "final_loss": 0.10453202611778802,
                "train_time": 134.6241898536682,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 8,
                    "min_child_weight": 5,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "44_Xgboost",
                "status": "trained",
                "final_loss": 0.10331440185327474,
                "train_time": 113.98546576499939,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "45_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.11846150632718075,
                "train_time": 38.793034076690674,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 64,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "46_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.13875285548600289,
                "train_time": 39.7762553691864,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "47_ExtraTrees_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.1240789772713053,
                "train_time": 65.298100233078,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "48_ExtraTrees",
                "status": "trained",
                "final_loss": 0.12280241787935897,
                "train_time": 142.0875117778778,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "49_RandomForest_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12654808606880408,
                "train_time": 65.60300278663635,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "50_RandomForest",
                "status": "trained",
                "final_loss": 0.1254636655361091,
                "train_time": 111.03814673423767,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "51_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.20410679940786824,
                "train_time": 53.03461718559265,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 64,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "52_NeuralNetwork",
                "status": "trained",
                "final_loss": 0.13496521583936724,
                "train_time": 60.28525114059448,
                "data_type": "original",
                "max_time_for_learner": 288.0
            }
        ],
        "hill_climbing_2": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.5,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 30,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "53_LightGBM",
                "status": "trained",
                "final_loss": 0.09320608015349714,
                "train_time": 118.83971524238586,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.025,
                    "depth": 7,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "54_CatBoost",
                "status": "trained",
                "final_loss": 0.0981721813504801,
                "train_time": 210.4432635307312,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.025,
                    "depth": 9,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "55_CatBoost",
                "status": "trained",
                "final_loss": 0.09644962771075538,
                "train_time": 497.65759682655334,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.1,
                    "depth": 7,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "56_CatBoost",
                "status": "trained",
                "final_loss": 0.09880280525352605,
                "train_time": 129.35714864730835,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.1,
                    "depth": 9,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "57_CatBoost",
                "status": "trained",
                "final_loss": 0.09784817658093899,
                "train_time": 220.70393133163452,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 30,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "58_LightGBM",
                "status": "trained",
                "final_loss": 0.09670910359458648,
                "train_time": 122.48637628555298,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 0.9,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "59_Xgboost",
                "status": "trained",
                "final_loss": 0.10014799116717356,
                "train_time": 128.86900758743286,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 8,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 0.9,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "60_Xgboost",
                "status": "trained",
                "final_loss": 0.10394783815879444,
                "train_time": 126.40037870407104,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 8,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "61_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.1305214525602935,
                "train_time": 44.894012212753296,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 32,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "62_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.11969450997606575,
                "train_time": 45.60620927810669,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 8,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "63_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.1385762585577744,
                "train_time": 47.42335748672485,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 32,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "64_NeuralNetwork_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12846235772419276,
                "train_time": 51.64516067504883,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "65_ExtraTrees",
                "status": "trained",
                "final_loss": 0.12363327515772873,
                "train_time": 143.32474398612976,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "66_ExtraTrees",
                "status": "trained",
                "final_loss": 0.12246414399466309,
                "train_time": 165.55750393867493,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "67_ExtraTrees_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.1283933463814249,
                "train_time": 98.70938301086426,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "68_ExtraTrees_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12368316173123922,
                "train_time": 88.89005875587463,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "69_RandomForest",
                "status": "trained",
                "final_loss": 0.12447471692263247,
                "train_time": 148.44661569595337,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "70_RandomForest",
                "status": "trained",
                "final_loss": 0.12640598367823314,
                "train_time": 129.69382119178772,
                "data_type": "original",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "71_RandomForest_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12068785046298895,
                "train_time": 75.98158240318298,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "72_RandomForest_SelectedFeatures",
                "status": "trained",
                "final_loss": 0.12232359975264279,
                "train_time": 86.25597763061523,
                "data_type": "original_features_selection",
                "max_time_for_learner": 288.0
            }
        ],
        "ensemble": [
            {
                "model_type": "ensemble",
                "is_stacked": false,
                "name": "Ensemble",
                "status": "trained",
                "final_loss": 0.08270782553394365,
                "train_time": 39.79534339904785
            }
        ],
        "stack": [
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.5,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 30,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "53_LightGBM_Stacked",
                "status": "trained",
                "final_loss": 0.08710295482519348,
                "train_time": 147.24431443214417,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.025,
                    "depth": 9,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "55_CatBoost_Stacked",
                "status": "trained",
                "final_loss": 0.08487022327997164,
                "train_time": 342.3793046474457,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 0.9,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "59_Xgboost_Stacked",
                "status": "trained",
                "final_loss": 0.08682299521170593,
                "train_time": 156.38788151741028,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "45_NeuralNetwork_SelectedFeatures_Stacked",
                "status": "trained",
                "final_loss": 0.11152603734410244,
                "train_time": 58.849769830703735,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "71_RandomForest_SelectedFeatures_Stacked",
                "status": "trained",
                "final_loss": 0.08675260753143876,
                "train_time": 113.2909586429596,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "66_ExtraTrees_Stacked",
                "status": "trained",
                "final_loss": 0.08610758541236974,
                "train_time": 189.34839487075806,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 30,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "58_LightGBM_Stacked",
                "status": "trained",
                "final_loss": 0.08801455312932813,
                "train_time": 137.22487139701843,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.025,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "35_CatBoost_Stacked",
                "status": "trained",
                "final_loss": 0.08409095341518921,
                "train_time": 247.96009993553162,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "6_Default_Xgboost_Stacked",
                "status": "trained",
                "final_loss": 0.0872072878370676,
                "train_time": 164.49817204475403,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 32,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "62_NeuralNetwork_SelectedFeatures_Stacked",
                "status": "trained",
                "final_loss": 0.13078504879948338,
                "train_time": 60.85792136192322,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "72_RandomForest_SelectedFeatures_Stacked",
                "status": "trained",
                "final_loss": 0.08969464981797634,
                "train_time": 128.51950883865356,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "48_ExtraTrees_Stacked",
                "status": "trained",
                "final_loss": 0.08524195931839715,
                "train_time": 194.07325077056885,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.5,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "39_LightGBM_Stacked",
                "status": "trained",
                "final_loss": 0.08637134516971394,
                "train_time": 140.50208401679993,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.1,
                    "depth": 9,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "57_CatBoost_Stacked",
                "status": "trained",
                "final_loss": 0.08436144872647022,
                "train_time": 225.73040223121643,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 8,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "12_Xgboost_Stacked",
                "status": "trained",
                "final_loss": 0.08764599952336498,
                "train_time": 163.20074892044067,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "8_Default_NeuralNetwork_SelectedFeatures_Stacked",
                "status": "trained",
                "final_loss": 0.09425700870284312,
                "train_time": 62.690205574035645,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "69_RandomForest_Stacked",
                "status": "trained",
                "final_loss": 0.08686783782867641,
                "train_time": 204.31174325942993,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "65_ExtraTrees_Stacked",
                "status": "trained",
                "final_loss": 0.08574059346379632,
                "train_time": 153.52701997756958,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "40_LightGBM_Stacked",
                "status": "trained",
                "final_loss": 0.0879716959947698,
                "train_time": 142.34690833091736,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.1,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "36_CatBoost_Stacked",
                "status": "trained",
                "final_loss": 0.08474968903786603,
                "train_time": 179.1378309726715,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 8,
                    "min_child_weight": 5,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "44_Xgboost_Stacked",
                "status": "trained",
                "final_loss": 0.08568571569179549,
                "train_time": 156.14596796035767,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 32,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "64_NeuralNetwork_SelectedFeatures_Stacked",
                "status": "trained",
                "final_loss": 0.13302121459056468,
                "train_time": 68.33431124687195,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "50_RandomForest_Stacked",
                "status": "trained",
                "final_loss": 0.08857114065774883,
                "train_time": 319.74365496635437,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "68_ExtraTrees_SelectedFeatures_Stacked",
                "status": "trained",
                "final_loss": 0.08536553665217554,
                "train_time": 234.9979465007782,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.8,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "15_LightGBM_Stacked",
                "status": "trained",
                "final_loss": 0.08741586453484121,
                "train_time": 261.0546200275421,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "learning_rate": 0.2,
                    "depth": 7,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "38_CatBoost_Stacked",
                "status": "trained",
                "final_loss": 0.08642365369824487,
                "train_time": 196.32285952568054,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 5,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "41_Xgboost_Stacked",
                "status": "trained",
                "final_loss": 0.08499709996963746,
                "train_time": 287.7029528617859,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 16,
                    "dense_2_size": 8,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "61_NeuralNetwork_SelectedFeatures_Stacked",
                "status": "trained",
                "final_loss": 0.11926603130614175,
                "train_time": 118.58000063896179,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.8,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "70_RandomForest_Stacked",
                "status": "trained",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "47_ExtraTrees_SelectedFeatures_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.8,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 20,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "42_LightGBM_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.05,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "19_CatBoost_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 8,
                    "min_child_weight": 5,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "11_Xgboost_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 64,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "52_NeuralNetwork_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "49_RandomForest_SelectedFeatures_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "28_ExtraTrees_SelectedFeatures_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.9,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 20,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "17_LightGBM_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.025,
                    "depth": 7,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "54_CatBoost_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 8,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 0.9,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "60_Xgboost_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 8,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "63_NeuralNetwork_SelectedFeatures_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "24_RandomForest_SelectedFeatures_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "28_ExtraTrees_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.2,
                    "feature_fraction": 0.5,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 10,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "16_LightGBM_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "learning_rate": 0.1,
                    "depth": 7,
                    "rsm": 1.0,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "21_CatBoost_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "objective": "binary:logistic",
                    "eta": 0.075,
                    "max_depth": 6,
                    "min_child_weight": 1,
                    "subsample": 1.0,
                    "colsample_bytree": 1.0,
                    "seed": 6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "6_Default_Xgboost_SelectedFeatures_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 64,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "46_NeuralNetwork_SelectedFeatures_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "gini",
                    "max_features": 0.7,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "24_RandomForest_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1236,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 30,
                    "max_depth": 7,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "67_ExtraTrees_SelectedFeatures_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "drop_features": [
                        "random_feature",
                        "feature0178",
                        "feature0097",
                        "feature0064",
                        "feature0167",
                        "feature0158",
                        "feature0013",
                        "feature0110",
                        "feature0172",
                        "feature0194",
                        "feature0181",
                        "feature0062",
                        "feature0123",
                        "feature0115",
                        "feature0052",
                        "feature0058",
                        "feature0159",
                        "feature0135",
                        "feature0015",
                        "feature0100",
                        "feature0090",
                        "feature0023",
                        "feature0084",
                        "feature0182",
                        "feature0028",
                        "feature0111",
                        "feature0129",
                        "feature0134",
                        "feature0153",
                        "feature0173",
                        "feature0198",
                        "feature0043",
                        "feature0004",
                        "feature0164",
                        "feature0143",
                        "feature0039",
                        "feature0145",
                        "feature0105",
                        "feature0108",
                        "feature0057",
                        "feature0103",
                        "feature0144",
                        "feature0014",
                        "feature0059",
                        "feature0192",
                        "feature0147",
                        "feature0068",
                        "feature0086",
                        "feature0188",
                        "feature0085",
                        "feature0040",
                        "feature0049",
                        "feature0191",
                        "feature0066",
                        "feature0186",
                        "feature0150",
                        "feature0045",
                        "feature0034",
                        "feature0026",
                        "feature0063",
                        "feature0121",
                        "feature0092",
                        "feature0149",
                        "feature0060",
                        "feature0070",
                        "feature0009",
                        "feature0183",
                        "feature0148",
                        "feature0018",
                        "feature0036",
                        "feature0196",
                        "feature0169",
                        "feature0120",
                        "feature0179",
                        "feature0193",
                        "feature0157",
                        "feature0044",
                        "feature0076",
                        "feature0025",
                        "feature0078",
                        "feature0162",
                        "feature0081",
                        "feature0142",
                        "feature0104",
                        "feature0174",
                        "feature0199",
                        "feature0098",
                        "feature0093",
                        "feature0106",
                        "feature0116",
                        "feature0109",
                        "feature0067",
                        "feature0130",
                        "feature0175",
                        "feature0069",
                        "feature0112",
                        "feature0185",
                        "feature0077",
                        "feature0139",
                        "feature0190",
                        "feature0200",
                        "feature0160",
                        "feature0156",
                        "feature0089",
                        "feature0122",
                        "feature0165",
                        "feature0195",
                        "feature0133",
                        "feature0125",
                        "feature0176",
                        "feature0177",
                        "feature0095",
                        "feature0126",
                        "feature0166",
                        "feature0180",
                        "feature0131",
                        "feature0189",
                        "feature0187",
                        "feature0136",
                        "feature0137",
                        "feature0056",
                        "feature0079",
                        "feature0161",
                        "feature0075",
                        "feature0083",
                        "feature0171",
                        "feature0114",
                        "feature0154",
                        "feature0019",
                        "feature0107",
                        "feature0046",
                        "feature0047",
                        "feature0163",
                        "feature0074",
                        "feature0072",
                        "feature0055",
                        "feature0035",
                        "feature0117",
                        "feature0140",
                        "feature0168",
                        "feature0017",
                        "feature0094",
                        "feature0132",
                        "feature0141",
                        "feature0113",
                        "feature0080",
                        "feature0118",
                        "feature0119",
                        "feature0102",
                        "feature0146",
                        "feature0138",
                        "feature0127",
                        "feature0031",
                        "feature0152",
                        "feature0050",
                        "feature0087",
                        "feature0184",
                        "feature0101",
                        "feature0030",
                        "feature0071",
                        "feature0037",
                        "feature0197",
                        "feature0033",
                        "feature0041",
                        "feature0051",
                        "feature0048",
                        "feature0022",
                        "feature0128",
                        "feature0151",
                        "feature0155"
                    ]
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "objective": "binary",
                    "num_leaves": 15,
                    "learning_rate": 0.05,
                    "feature_fraction": 0.8,
                    "bagging_fraction": 0.5,
                    "min_data_in_leaf": 50,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "15_LightGBM_SelectedFeatures_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_features_selection_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification",
                    "golden_features": {
                        "results_path": "AutoML_3",
                        "ml_task": "binary_classification"
                    }
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "learning_rate": 0.05,
                    "depth": 8,
                    "rsm": 0.8,
                    "loss_function": "Logloss",
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "19_CatBoost_GoldenFeatures_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_golden_features_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary:logistic",
                    "eta": 0.1,
                    "max_depth": 7,
                    "min_child_weight": 25,
                    "subsample": 0.9,
                    "colsample_bytree": 0.6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "13_Xgboost_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "dense_1_size": 32,
                    "dense_2_size": 16,
                    "learning_rate": 0.05,
                    "seed": 8,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "8_Default_NeuralNetwork_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 50,
                    "max_depth": 6,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "26_RandomForest_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "criterion": "entropy",
                    "max_features": 0.6,
                    "min_samples_split": 50,
                    "max_depth": 6,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "30_ExtraTrees_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "LightGBM",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1237,
                    "objective": "binary",
                    "num_leaves": 63,
                    "learning_rate": 0.05,
                    "feature_fraction": 1.0,
                    "bagging_fraction": 1.0,
                    "min_data_in_leaf": 20,
                    "metric": "binary_logloss",
                    "custom_eval_metric_name": null,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "43_LightGBM_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "CatBoost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "learning_rate": 0.1,
                    "depth": 6,
                    "rsm": 1,
                    "loss_function": "Logloss",
                    "seed": 7,
                    "eval_metric": "Logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "7_Default_CatBoost_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rounds": 10000,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Xgboost",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1238,
                    "objective": "binary:logistic",
                    "eta": 0.15,
                    "max_depth": 8,
                    "min_child_weight": 50,
                    "subsample": 0.6,
                    "colsample_bytree": 0.6,
                    "eval_metric": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "14_Xgboost_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Neural Network",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "dense_1_size": 32,
                    "dense_2_size": 4,
                    "learning_rate": 0.05,
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "31_NeuralNetwork_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "train_cant_improve_limit": 1,
                    "min_steps": 1,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Random Forest",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "seed": 1235,
                    "criterion": "gini",
                    "max_features": 0.5,
                    "min_samples_split": 20,
                    "max_depth": 4,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "23_RandomForest_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            },
            {
                "additional": {
                    "trees_in_step": 100,
                    "max_steps": 50,
                    "early_stopping_rounds": 50,
                    "max_rows_limit": null,
                    "max_cols_limit": null
                },
                "preprocessing": {
                    "columns_preprocessing": {},
                    "target_preprocessing": [
                        "na_exclude"
                    ],
                    "ml_task": "binary_classification"
                },
                "validation_strategy": {
                    "validation_type": "kfold",
                    "k_folds": 5,
                    "shuffle": true,
                    "stratify": true,
                    "random_seed": 1234,
                    "X_path": "AutoML_3\\X_stacked.data",
                    "y_path": "AutoML_3\\y.data",
                    "results_path": "AutoML_3"
                },
                "learner": {
                    "model_type": "Extra Trees",
                    "ml_task": "binary_classification",
                    "n_jobs": -1,
                    "criterion": "gini",
                    "max_features": 0.9,
                    "min_samples_split": 30,
                    "max_depth": 4,
                    "seed": 10,
                    "eval_metric_name": "logloss",
                    "explain_level": 2
                },
                "automl_random_state": 1234,
                "ml_task": "binary_classification",
                "explain_level": 2,
                "name": "10_Default_ExtraTrees_Stacked",
                "status": "skipped",
                "final_loss": 0.08796558689063877,
                "train_time": 334.98549604415894,
                "data_type": "original_stacked",
                "max_time_for_learner": 288.0,
                "is_stacked": true
            }
        ],
        "ensemble_stacked": [
            {
                "model_type": "ensemble",
                "is_stacked": true,
                "name": "Ensemble_Stacked",
                "status": "trained",
                "final_loss": 0.0796315667355351,
                "train_time": 144.53800463676453
            }
        ]
    },
    "adjust_validation": false
}